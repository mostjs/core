// @flow
import type { Stream, Sink, Scheduler, Task, Disposable, Time, Period, Delay } from '@most/types'

export type SeedValue <S, A> = {
  seed: S,
  value: A
}

declare export function runEffects <A> (s: Stream<A>, scheduler: Scheduler): Promise<void>

declare export function empty (): Stream<any>
declare export function never (): Stream<any>
declare export function just <A> (a: A): Stream<A>

export type RunStream<A> = (sink: Sink<A>, scheduler: Scheduler) => Disposable
declare export function newStream <A> (run: RunStream<A>): Stream<A>

declare export function fromArray <A> (a: Array<A>): Stream<A>
declare export function fromIterable <A> (a: Iterable<A>): Stream<A>

declare export function startWith <A> (a: A, s: Stream<A>): Stream<A>
declare export function startWith <A> (a: A): (s: Stream<A>) => Stream<A>
declare export function concat <A> (s1: Stream<A>, s2: Stream<A>): Stream<A>
declare export function concat <A> (s1: Stream<A>): (s2: Stream<A>) => Stream<A>

declare export function periodic (period: Period): Stream<void>

declare export function iterate <S, A> (f: (A) => A|Promise<A>, seed: A): Stream<A>
declare export function iterate <S, A> (f: (A) => A|Promise<A>): (seed: A) => Stream<A>

declare export function unfold <S, A> (f: (S) => SeedValue<S, Promise<A>>, seed: S): Stream<A>
declare export function unfold <S, A> (f: (S) => SeedValue<S, Promise<A>>): (seed: S) => Stream<A>

export type GeneratorFunction<A> = (...args: Array<any>) => Generator<A>
declare export function generate <A> (g: GeneratorFunction<A>, ...args: Array<any>): Stream<A>

declare export function map <A, B> (f: (A) => B, s: Stream<A>): Stream<B>
declare export function map <A, B> (f: (A) => B): (s: Stream<A>) => Stream<B>

declare export function constant <A, B> (a: A, s: Stream<B>): Stream<A>
declare export function constant <A, B> (a: A): (s: Stream<B>) => Stream<A>

declare export function tap <A> (f: (A) => any, s: Stream<A>): Stream<A>
declare export function tap <A> (f: (A) => any): (s: Stream<A>) => Stream<A>

declare export function scan <A, B> (f: (B, A) => B, b: B, s: Stream<A>): Stream<B>
declare export function scan <A, B> (f: (B, A) => B): (b: B, s: Stream<A>) => Stream<B>
declare export function scan <A, B> (f: (B, A) => B, b: B): (s: Stream<A>) => Stream<B>
declare export function scan <A, B> (f: (B, A) => B): (b: B) => (s: Stream<A>) => Stream<B>

declare export function loop <A, B, S> (f: (S, A) => SeedValue<S, B>, seed: S, s: Stream<A>): Stream<B>
declare export function loop <A, B, S> (f: (S, A) => SeedValue<S, B>): (seed: S, s: Stream<A>) => Stream<B>
declare export function loop <A, B, S> (f: (S, A) => SeedValue<S, B>, seed: S): (s: Stream<A>) => Stream<B>
declare export function loop <A, B, S> (f: (S, A) => SeedValue<S, B>): (seed: S) => (s: Stream<A>) => Stream<B>

declare export function ap <A, B> (fs: Stream<(A) => B>, s: Stream<A>): Stream<B>
declare export function ap <A, B> (fs: Stream<(A) => B>): (s: Stream<A>) => Stream<B>

declare export function chain <A, B> (f: (A) => Stream<B>, s: Stream<A>): Stream<B>
declare export function chain <A, B> (f: (A) => Stream<B>): (s: Stream<A>) => Stream<B>

declare export function join <A> (s: Stream<Stream<A>>): Stream<A>

declare export function concatMap <A, B> (f: (A) => Stream<B>, s: Stream<A>): Stream<B>
declare export function concatMap <A, B> (f: (A) => Stream<B>): (s: Stream<A>) => Stream<B>

declare export function mergeConcurrently <A> (concurrency: number, s: Stream<Stream<A>>): Stream<A>
declare export function mergeConcurrently <A> (concurrency: number): (s: Stream<Stream<A>>) => Stream<A>

declare export function mergeMapConcurrently <A, B> (concurrency: number, f: (A) => Stream<B>, s: Stream<A>): Stream<B>
declare export function mergeMapConcurrently <A, B> (concurrency: number): (f: (A) => Stream<B>, s: Stream<A>) => Stream<B>
declare export function mergeMapConcurrently <A, B> (concurrency: number, f: (A) => Stream<B>): (s: Stream<A>) => Stream<B>
declare export function mergeMapConcurrently <A, B> (concurrency: number): (f: (A) => Stream<B>) => (s: Stream<A>) => Stream<B>

declare export function continueWith <A> (f: (any) => A, s: Stream<A>): Stream<A>
declare export function continueWith <A> (f: (any) => A): (s: Stream<A>) => Stream<A>

declare export function switchLatest <A> (s: Stream<Stream<A>>): Stream<A>

declare export function merge <A> (...ss: Array<Stream<A>>): Stream<A>
declare export function mergeArray <A> (ss: Array<Stream<A>>): Stream<A>

declare export function sample <A, B, C> (f: (A, B) => C, sampler: Stream<A>, sampled: Stream<B>): Stream<C>
declare export function sample <A, B, C> (f: (A, B) => C): (sampler: Stream<A>, sampled: Stream<B>) => Stream<C>
declare export function sample <A, B, C> (f: (A, B) => C, sampler: Stream<A>): (sampled: Stream<B>) => Stream<C>
declare export function sample <A, B, C> (f: (A, B) => C): (sampler: Stream<A>) => (sampled: Stream<B>) => Stream<C>

declare export function combine <A, B, Z> (f: (A, B) => Z, sa: Stream<A>, sb: Stream<B>): Stream<Z>
declare export function combine <A, B, C, Z> (f: (A, B, C) => Z, sa: Stream<A>, sb: Stream<B>, sc: Stream<C>): Stream<Z>
declare export function combine <A, B, C, D, Z> (f: (A, B, C, D) => Z, sa: Stream<A>, sb: Stream<B>, sc: Stream<C>, sd: Stream<D>): Stream<Z>
declare export function combine <A, B, C, D, E, Z> (f: (A, B, C, D, E) => Z, sa: Stream<A>, sb: Stream<B>, sc: Stream<C>, sd: Stream<D>, se: Stream<E>): Stream<Z>
declare export function combine <A, B, C, D, E, F, Z> (f: (A, B, C, D, E, F) => Z, sa: Stream<A>, sb: Stream<B>, sc: Stream<C>, sd: Stream<D>, se: Stream<E>, sf: Stream<F>): Stream<Z>

declare export function combineArray <A, B, Z> (f: (A, B) => Z, ss: [Stream<A>, Stream<B>]): Stream<Z>
declare export function combineArray <A, B, Z> (f: (A, B) => Z): (ss: [Stream<A>, Stream<B>]) => Stream<Z>
declare export function combineArray <A, B, C, Z> (f: (A, B, C) => Z, ss: [Stream<A>, Stream<B>, Stream<C>]): Stream<Z>
declare export function combineArray <A, B, C, Z> (f: (A, B, C) => Z): (ss: [Stream<A>, Stream<B>, Stream<C>]) => Stream<Z>
declare export function combineArray <A, B, C, D, Z> (f: (A, B, C, D) => Z, ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>]): Stream<Z>
declare export function combineArray <A, B, C, D, Z> (f: (A, B, C, D) => Z): (ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>]) => Stream<Z>
declare export function combineArray <A, B, C, D, E, Z> (f: (A, B, C, D, E) => Z, ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>, Stream<E>]): Stream<Z>
declare export function combineArray <A, B, C, D, E, Z> (f: (A, B, C, D, E) => Z): (ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>, Stream<E>]) => Stream<Z>
declare export function combineArray <A, B, C, D, E, F, Z> (f: (A, B, C, D, E, F) => Z, ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>, Stream<E>, Stream<F>]): Stream<Z>
declare export function combineArray <A, B, C, D, E, F, Z> (f: (A, B, C, D, E, F) => Z): (ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>, Stream<E>, Stream<F>]) => Stream<Z>
// Catch-all combineArray
declare export function combineArray <Z> (f: (...rest: Array<any>) => Z, ss: Array<Stream<any>>): Stream<Z>
declare export function combineArray <Z> (f: (...rest: Array<any>) => Z): (ss: Array<Stream<any>>) => Stream<Z>

declare export function zip <A, B, Z> (f: (A, B) => Z, sa: Stream<A>, sb: Stream<B>): Stream<Z>
declare export function zip <A, B, C, Z> (f: (A, B, C) => Z, sa: Stream<A>, sb: Stream<B>, sc: Stream<C>): Stream<Z>
declare export function zip <A, B, C, D, Z> (f: (A, B, C, D) => Z, sa: Stream<A>, sb: Stream<B>, sc: Stream<C>, sd: Stream<D>): Stream<Z>
declare export function zip <A, B, C, D, E, Z> (f: (A, B, C, D, E) => Z, sa: Stream<A>, sb: Stream<B>, sc: Stream<C>, sd: Stream<D>, se: Stream<E>): Stream<Z>
declare export function zip <A, B, C, D, E, F, Z> (f: (A, B, C, D, E, F) => Z, sa: Stream<A>, sb: Stream<B>, sc: Stream<C>, sd: Stream<D>, se: Stream<E>, sf: Stream<F>): Stream<Z>

declare export function zipArray <A, B, Z> (f: (A, B) => Z, ss: [Stream<A>, Stream<B>]): Stream<Z>
declare export function zipArray <A, B, Z> (f: (A, B) => Z): (ss: [Stream<A>, Stream<B>]) => Stream<Z>
declare export function zipArray <A, B, C, Z> (f: (A, B, C) => Z, ss: [Stream<A>, Stream<B>, Stream<C>]): Stream<Z>
declare export function zipArray <A, B, C, Z> (f: (A, B, C) => Z): (ss: [Stream<A>, Stream<B>, Stream<C>]) => Stream<Z>
declare export function zipArray <A, B, C, D, Z> (f: (A, B, C, D) => Z, ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>]): Stream<Z>
declare export function zipArray <A, B, C, D, Z> (f: (A, B, C, D) => Z): (ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>]) => Stream<Z>
declare export function zipArray <A, B, C, D, E, Z> (f: (A, B, C, D, E) => Z, ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>, Stream<E>]): Stream<Z>
declare export function zipArray <A, B, C, D, E, Z> (f: (A, B, C, D, E) => Z): (ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>, Stream<E>]) => Stream<Z>
declare export function zipArray <A, B, C, D, E, F, Z> (f: (A, B, C, D, E, F) => Z, ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>, Stream<E>, Stream<F>]): Stream<Z>
declare export function zipArray <A, B, C, D, E, F, Z> (f: (A, B, C, D, E, F) => Z): (ss: [Stream<A>, Stream<B>, Stream<C>, Stream<D>, Stream<E>, Stream<F>]) => Stream<Z>
// Catch-all zipArray
declare export function zipArray <Z> (f: (...rest: Array<any>) => Z, ss: Array<Stream<any>>): Stream<Z>
declare export function zipArray <Z> (f: (...rest: Array<any>) => Z): (ss: Array<Stream<any>>) => Stream<Z>

declare export function withArrayValues <A> (a: Array<A>, s: Stream<any>): Stream<A>
declare export function withArrayValues <A> (a: Array<A>): (s: Stream<any>) => Stream<A>

declare export function zipArrayValues <A, B, C> (f: (A, B) => C, a: Array<A>, s: Stream<B>): Stream<C>
declare export function zipArrayValues <A, B, C> (f: (A, B) => C): (a: Array<A>, s: Stream<B>) => Stream<C>
declare export function zipArrayValues <A, B, C> (f: (A, B) => C, a: Array<A>): (s: Stream<B>) => Stream<C>
declare export function zipArrayValues <A, B, C> (f: (A, B) => C): (a: Array<A>) => (s: Stream<B>) => Stream<C>

declare export function filter <A> (p: (A) => boolean, s: Stream<A>): Stream<A>
declare export function filter <A> (p: (A) => boolean): (s: Stream<A>) => Stream<A>

declare export function skipRepeats <A> (s: Stream<A>): Stream<A>

declare export function skipRepeatsWith <A> (equals: (a1: A, a2: A) => boolean, s: Stream<A>): Stream<A>
declare export function skipRepeatsWith <A> (equals: (a1: A, a2: A) => boolean): (s: Stream<A>) => Stream<A>


declare export function take <A> (n: number, s: Stream<A>): Stream<A>
declare export function take <A> (n: number): (s: Stream<A>) => Stream<A>

declare export function skip <A> (n: number, s: Stream<A>): Stream<A>
declare export function skip <A> (n: number): (s: Stream<A>) => Stream<A>

declare export function slice <A> (start: number, end: number, s: Stream<A>): Stream<A>
declare export function slice <A> (start: number): (end: number, s: Stream<A>) => Stream<A>
declare export function slice <A> (start: number, end: number): (s: Stream<A>) => Stream<A>
declare export function slice <A> (start: number): (end: number) => (s: Stream<A>) => Stream<A>

declare export function takeWhile <A> (p: (A) => boolean, s: Stream<A>): Stream<A>
declare export function takeWhile <A> (p: (A) => boolean): (s: Stream<A>) => Stream<A>

declare export function skipWhile <A> (p: (A) => boolean, s: Stream<A>): Stream<A>
declare export function skipWhile <A> (p: (A) => boolean): (s: Stream<A>) => Stream<A>

declare export function skipAfter <A> (p: (A) => boolean, s: Stream<A>): Stream<A>
declare export function skipAfter <A> (p: (A) => boolean): (s: Stream<A>) => Stream<A>

declare export function until <A> (until: Stream<any>, s: Stream<A>): Stream<A>
declare export function until <A> (until: Stream<any>): (s: Stream<A>) => Stream<A>

declare export function since <A> (since: Stream<any>, s: Stream<A>): Stream<A>
declare export function since <A> (since: Stream<any>): (s: Stream<A>) => Stream<A>

declare export function during <A> (since: Stream<Stream<any>>, s: Stream<A>): Stream<A>

declare export function delay <A> (delay: Delay, s: Stream<A>): Stream<A>
declare export function delay <A> (delay: Delay): (s: Stream<A>) => Stream<A>

declare export function throttle <A> (period: Period, s: Stream<A>): Stream<A>
declare export function throttle <A> (period: Period): (s: Stream<A>) => Stream<A>

declare export function debounce <A> (period: Period, s: Stream<A>): Stream<A>
declare export function debounce <A> (period: Period): (s: Stream<A>) => Stream<A>

declare export function fromPromise <A> (pa: Promise<A>): Stream<A>
declare export function awaitPromises <A> (spa: Stream<Promise<A>>): Stream<A>

declare export function recoverWith <A, E:Error> (f: (E) => Stream<A>, s: Stream<A>): Stream<A>
declare export function recoverWith <A, E:Error> (f: (E) => Stream<A>): (s: Stream<A>) => Stream<A>

declare export function throwError <E:Error> (e: Error): Stream<any>

export type PropagateTask<A> = Task & {
  value: A,
  sink: Sink<A>,
  active: boolean
}

export type PropagateTaskRun<A> = (time: Time, value: A, sink: Sink<A>, task: PropagateTask<A>) => any

declare export function propagateTask<A> (run: PropagateTaskRun<A>, value: A, sink: Sink<A>): PropagateTask<A>
declare export function propagateEventTask<A> (value: A, sink: Sink<A>): PropagateTask<A>
declare export function propagateErrorTask<E: Error> (e: E, sink: Sink<any>): PropagateTask<any>
declare export function propagateEndTask (sink: Sink<any>): PropagateTask<void>

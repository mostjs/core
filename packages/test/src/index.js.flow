// @flow
import type { Stream, Sink, Time, Offset } from '@most/types'

export type SinkSpy<A> = Sink<A> & {
  eventCalled(): number,
  eventTime(): Time,
  eventValue(): A,
  endCalled(): number,
  endTime(): Time,
  errorCalled(): number,
  errorTime(): Time,
  errorValue(): Error
}

export type TimeStampedEvent<A> = {
  time: Time,
  value: A
}

export type TimeStampedEvents<A> = Array<TimeStampedEvent<A>>

declare export function newFakeDisposeStream<T> (disposer: () => void, source: Stream<T>) : Stream<T>
declare export function newFakeDisposeStream<T> (disposer: () => void) : (source: Stream<T>) => Stream<T>

declare export function newSinkSpy<A> (eventCb: (time: Time, value: A) => void, endCb: (time: Time) => void, errorCb: (time: Time, error: Error) => void) : SinkSpy<A>
declare export function newSinkSpy<A> (eventCb: (time: Time, value: A) => void) : (endCb: (time: Time) => void, errorCb: (time: Time, error: Error) => void) => SinkSpy<A>
declare export function newSinkSpy<A> (eventCb: (time: Time, value: A) => void, endCb: (time: Time) => void) : (errorCb: (time: Time, error: Error) => void) => SinkSpy<A>
declare export function newSinkSpy<A> (eventCb: (time: Time, value: A) => void) : (endCb: (time: Time) => void) => (errorCb: (time: Time, error: Error) => void) => SinkSpy<A>
declare export function newEventErrorSinkSpy<A> (e: Error) : SinkSpy<A>
declare export function newEndErrorSinkSpy<A> (e: Error) : SinkSpy<A>

declare export function assertSame<A> (s1: Stream<A>, s2: Stream<A>) : Promise<boolean>
declare export function assertSame<A> (s1: Stream<A>) : (s2: Stream<A>) => Promise<boolean>
declare export function expectArray<A> (array: TimeStampedEvents<A>, s: Stream<A>) : Promise<boolean>
declare export function expectArray<A> (array: TimeStampedEvents<A>) : (s: Stream<A>) => Promise<boolean>

declare export function collectEvents<A> (stream: Stream<A>) : Promise<TimeStampedEvents<A>>
declare export function collectEventsFor<A> (nticks: Time, stream: Stream<A>) : Promise<TimeStampedEvents<A>>
declare export function collectEventsFor<A> (nticks: Time) : (stream: Stream<A>) => Promise<TimeStampedEvents<A>>

declare export function atTimes<A> (array: TimeStampedEvents<A>) : Stream<A>
declare export function makeEventsFromArray<A> (dt: Offset, a: Array<A>) : Stream<A>
declare export function makeEventsFromArray<A> (dt: Offset) : (a: Array<A>) => Stream<A>
declare export function makeEvents (dt: Offset, n: number) : Stream<number>
declare export function makeEvents (dt: Offset) : (n: number) => Stream<number>
